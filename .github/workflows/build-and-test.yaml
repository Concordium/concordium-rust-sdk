name: Build and test

# This job runs
# - rustfmt and clippy linting,
# - cargo check
# - cargo test

on:
  push:
    branches: main

  pull_request:
    branches: main

  workflow_dispatch: # allows manual trigger

env:
  RUST_FMT: nightly-2023-04-01-x86_64-unknown-linux-gnu
  RUST_VERSION: "1.81"

jobs:
  "lint_fmt":
    name: lint:fmt
    # Don't run on draft pull requests
    if: ${{ !github.event.pull_request.draft }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Format
        run: |
          rustup default $RUST_FMT
          rustup component add rustfmt
          cargo fmt -- --color=always --check

  "lint_doc":
    name: lint:doc
    # Don't run on draft pull requests
    if: ${{ !github.event.pull_request.draft }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Docs
        run: |
          rustup default $RUST_VERSION
          rustup component add rust-docs
          RUSTDOCFLAGS="-D warnings" cargo doc --no-deps --color=always

  # Check compilation of just the crate without tests and examples. This is to
  # make sure that the features are correctly set for the normal dependencies.
  "check_pure_compilation":
    name: lint:clippy
    # Don't run on draft pull requests
    if: ${{ !github.event.pull_request.draft }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Clippy
        run: |
          rustup default $RUST_VERSION
          cargo check --all-targets --all-features 
          git diff Cargo.lock

  "lint_clippy_test":
    name: lint:clippy
    # Don't run on draft pull requests
    if: ${{ !github.event.pull_request.draft }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Clippy
        run: |
          rustup default $RUST_VERSION
          rustup component add clippy
          cargo clippy --color=always --all-targets --all-features --locked -- -D warnings
          # Examples can be large with a lot of debug info due to tokio. So we
          # disable debug info generation.
          RUSTFLAGS="-C debuginfo=0" cargo test --all-targets --all-features --locked
